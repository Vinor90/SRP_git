// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWStructuredBuffer<float3> Positions;
                                                                                       
float Time;
float Spread;

float random(float v, float offset = 0.546)
{
    float rand = frac(sin(v + offset) * 143758.5464);
    return rand;
                                                                                        
}


float3 random3(float value)
{
    return float3(random(value, 3.981),
    random(value, 3.152),
    random(value, 5.724));
}

[numthreads(64, 1, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    // TODO: insert actual code here!

    float3 sinDir = normalize(random3(id.x) - 0.5);
    float3 vec = normalize((random3(id.x + 7.1393) - 0.5));
    float3 cosDir = normalize(cross(sinDir, vec));
    
    
    float scaledTime = Time * 0.5 + random(id.x) * 1452.131154;
    
    float3 dir = sinDir * sin(scaledTime) + cosDir * cos(scaledTime);
    
    Positions[id.x] = 2 * dir * Spread;

}
